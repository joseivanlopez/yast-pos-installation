/**
 * This client calls Branch Server initialization script and shows its output
 */

{
    textdomain "slepos-firstboot";

    import "FileUtils";
    import "GetInstArgs";
    import "Mode";
    import "Popup";
    import "Stage";
    import "Wizard";

    import "POSInstallation";


    y2milestone ("SLEPOS firstboot installation (%1, %2)", Mode::mode (), Stage::stage ());

    any ret	= `auto;

    if (GetInstArgs::going_back ())
    {
	return ret;
    }

    if (!Stage::firstboot ())
    {
	y2milestone ("this should only run in firstboot stage: exiting");
	return ret;
    }

    map args		= GetInstArgs::argmap ();
    map display_info	= UI::GetDisplayInfo ();
    boolean text_mode	= display_info["TextMode"]:false;
    string stdout_file	= "posInitBranchserver.log-1";
    string logs_directory = "/var/log/pos";

    // find the latest log file
    map out = (map) SCR::Execute (.target.bash_output,
	sformat ("ls %1/posInitBranchserver.log-* 2>/dev/null | cut -f 2 -d - | sort -nr",
	logs_directory));
    if (out["stdout"]:"" != "")
    {
	list<string> nums	= splitstring (out["stdout"]:"", "\n");
	integer last = tointeger (nums[0]:"0");
	if (last != nil)
	{
	    stdout_file	= sformat ("posInitBranchserver.log-%1", last + 1);
	}
    }

    term cont	= `VBox (
	`VSpacing (0.4),
	`ReplacePoint (`id (`rp_label),
	    // text label
	    `Label (`id (`label), _("Branch Server installation is running. Please wait..."))
	),
	`VBox (
	    // label
	    `Left (`Label (_("Setup script ('posInitBranchserver') output"))),
	    `LogView (`id (`stdout), "", 8, 0)
	)
    );

    term contents = `HBox (`HSpacing (1), `VBox (
	`VSpacing (0.4),
	cont,
	`VSpacing (0.4)
    ), `HSpacing (1));

    // help text
    string help_text	= _("<p>Here you can see the progress of <b>Branch Server initialization</b>.</p>

<p>
The initialization could fail from different reasons. For name or DN related errors, check the value of BranchServer DN entered in previous step.</p>
<p>
For network related errors, it's probably necessary to reconfigure network settings early in the sequence. Consult SLEPOS user guide, Chapter 5.1, <b>BranchServer Network configuration</b> for details.
</p>

<p>
In case of various service errors, consult SLEPOS user guide, Chapter 4.6.1, <b>Adding BranchServer services</b>. Then check your LDAP tree or respective scService entry.
</p>");

    // dialog caption
    Wizard::SetContents (_("POS Branch Server Installation"),
	contents, help_text, args["enable_back"]:true, args["enable_next"]:true
    );


    integer pid	= -1;

    void update_output () {

	string line = (string)SCR::Read (.process.read_line, pid);
	if (line != nil && line != "")
	    UI::ChangeWidget (`id(`stdout), `LastLine, line + "\n");
    }

    UI::BusyCursor ();
    Wizard::DisableNextButton ();
    Wizard::DisableBackButton ();

    string cmd	= sformat ("%1 -r -n 2>&1", POSInstallation::bs_install_cmd);
    if (POSInstallation::offline_installation)
    {
	cmd	= sformat ("%1 -r -n -f %2 2>&1",
	    POSInstallation::bs_install_cmd, POSInstallation::offline_file);
    }
    y2milestone ("Executing '%1'", cmd);
    UI::ChangeWidget (`id(`stdout), `LastLine, cmd + "\n\n");
    pid	= (integer) SCR::Execute (.process.start_shell, cmd);
    integer exit_status	= 0;
    while (true)
    {
	ret = (symbol) UI::PollInput();
	if (SCR::Read(.process.running, pid) != true)
	{
	    update_output ();
	    // explicitely check the process buffer after exit (bnc#488799)
	    string buf   = (string) SCR::Read (.process.read, pid);
	    if (buf != nil && buf != "")
		UI::ChangeWidget (`id(`stdout), `LastLine, buf + "\n");

	    exit_status	= (integer) SCR::Read (.process.status, pid);
	    y2milestone ("exit status of the script: %1", exit_status);
	    UI::ReplaceWidget (`id (`rp_label),
		// text label
		`Label (`id (`label), `opt (`boldFont), _("Installation is completed."))
	    );
	    break;
	}
	else
	{
	    update_output ();
	}
	if (ret == `cancel || ret == `abort)
	{
	    SCR::Execute (.process.kill, pid, 15);
	    UI::ReplaceWidget (`id (`rp_label),
		// text label
		`Label (`id (`label), `opt (`boldFont), _("Installation has been aborted."))
	    );
	    break;
	}
	sleep (100);
    }

    SCR::Execute (.process.kill, pid);

    // save the log files
    if (FileUtils::CheckAndCreatePath (logs_directory))
    {
	SCR::Write (.target.string, logs_directory + "/" + stdout_file,
	    (string) UI::QueryWidget (`id (`stdout), `Value));
    }


    UI::NormalCursor ();

    if (exit_status != nil && exit_status > 249 && exit_status < 254)
    {
	// error message, %1 is exit code (number)
	Popup::Message (sformat (_("There has been a problem with network device configuration (%1).
Proceed according to the manual."), exit_status));
    }

    Wizard::EnableBackButton ();
    Wizard::EnableNextButton ();

    while (true)
    {
	ret	= UI::UserInput ();
	if (ret == `abort && !Popup::ConfirmAbort (`incomplete))
	{
	    continue;
	}
	else
	{
	    break;
	}
    }
    return ret;
}
