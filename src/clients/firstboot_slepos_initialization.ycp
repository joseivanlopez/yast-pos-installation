/**
 * This client checks which kind of SLEPOS Branch server initialization is running
 * and gathers the data for appropriate Branch Server initialization script
 */

{
    textdomain "slepos-firstboot";

    import "GetInstArgs";
    import "Label";
    import "Mode";
    import "Popup";
    import "Stage";
    import "Wizard";

    import "POSInstallation";


    y2milestone ("SLEPOS firstboot initializaton (%1, %2)", Mode::mode (), Stage::stage ());

    any ret	= `auto;

    if (!Stage::firstboot ())
    {
	y2milestone ("this should only run in firstboot stage: exiting");
	return ret;
    }

    map args = GetInstArgs::argmap ();

    // files for offline initialization
    // http://svn.suse.de/viewvc/slepos/trunk/slepos/images/branchserver/root/usr/share/SLEPOS/OIF/
    string oif_directory	= "/usr/share/SLEPOS/OIF";
    boolean offline_initialization= POSInstallation::offline_initialization;
    string offline_file		= POSInstallation::offline_file;

    map<string,string> labels	= $[
	// text entry label
	"ALL_LDAPHOST"		: _("LDAP URI of Admin Server"),
	// text entry label
	"BRANCH_LDAPBASE"	: _("Branch/Location LDAP Base DN"),
	// text entry label
	"POS_ADMIN_PASSWORD"	: _("Branch Password"),
    ];
    map<string,string> settings	= POSInstallation::online_initialization_settings;

    /*
    If *.tgz in /usr/share/SLEPOS/OIF/ exists, off-line initialization is possible
    */
    map out = (map) SCR::Execute (.target.bash_output,
	sformat ("ls -A1 %1/*.tgz 2>/dev/null", oif_directory));
    list<string> offline_files	= splitstring (out["stdout"]:"", "\n");
    if (offline_file == "" && offline_files != nil && size (offline_files) > 0)
    {
	offline_initialization	= true;
	offline_file		= offline_files[0]:"";
    }


    void enable_disable_widgets () {

	UI::ChangeWidget (`id (`offline_file), `Enabled, offline_initialization);
	UI::ChangeWidget (`id (`browse), `Enabled, offline_initialization);

	foreach (string w_id, string val, settings, {
	    UI::ChangeWidget (`id (w_id), `Enabled, !offline_initialization);
	});
    }

    term contents = `HBox (`HSpacing (3), `RadioButtonGroup (`id (`rb), `VBox (

	`Left (`RadioButton (`id (`offline_initialization), `opt (`notify),
	    // radio button label
	    _("Offline Initialization"), offline_initialization)),
	`VSpacing (),
	`HBox (
	    `HSpacing (3),
	    `VBox (
		// label (file name is on next line)
		`Left (`Label (_("Offline Initialization File:"))),
		`ReplacePoint (`id (`rp_file), `HBox (
		    `Left (`Label (`id (`offline_file), offline_file)),
		    // button label
		    `Right (`PushButton (`id (`browse), _("&Change...")))
		))
	    ),
	    `HSpacing (3)
	),
	`VSpacing (),
	`Left (`RadioButton (`id (`online_initialization), `opt (`notify),
	    // radio button label
	    _("Online Initialization"), !offline_initialization)
	),
	`HBox (`HSpacing (3), `VBox (
	    `VSpacing (0.5),
	    // text entry label
	    `InputField (`id ("ALL_LDAPHOST"), `opt (`hstretch), _("LDAP URI of &Admin Server"),
		settings["ALL_LDAPHOST"]:""),
	    // text entry label
	    `InputField (`id ("BRANCH_LDAPBASE"), `opt (`hstretch), _("Branch/&Location LDAP Base DN"),
		settings["BRANCH_LDAPBASE"]:""),
	    // text entry label
	    `Password (`id ("POS_ADMIN_PASSWORD"), `opt (`hstretch), _("Branch &Password"),
		settings["POS_ADMIN_PASSWORD"]:"")
	), `HSpacing (3))
    )), `HSpacing (3));


    // help text
    string help_text	= _("<p><b>Offline Initialization</b><br>
Initialize Branch Server from an <b>Offline Initialization File</b> (OIF). If the file was not found automatically, use <b>Change</b> to enter its correct location.</p>

<p><b>Online Initialization</b><br>
Initialize Branch Server using an internet connection to the Admin Server.
  
Enter <b>LDAP URI of Admin Server</b> (like <tt>ldaps://admin.mycomp.us</tt>), <b>Branch/Location LDAP Base DN</b> (for example <tt>cn=store1,ou=myunit,o=mycomp,c=us</tt>) and the <b>Password</b> associated with the given Branch/Location.</p>");

    // dialog caption
    Wizard::SetContents (_("POS Branch Server Initialization"),
	contents, help_text, args["enable_back"]:true, args["enable_next"]:true
    );

    enable_disable_widgets ();
    if (offline_files == nil || offline_files == [])
    {
	UI::ChangeWidget (`id (`offline_initialization), `Enabled, false);
    }

    while (true)
    {
	ret	= UI::UserInput ();
	if (ret == `back)
	{
	    break;
	}
	if (ret == `abort && Popup::ConfirmAbort(`incomplete))
	{
	    break;
	}
	if (ret == `browse)
	{
	    string file = UI::AskForExistingFile (oif_directory, "*.tgz",
		// label for file selection dialog
		_("Choose the Offline Initialization File")
	    );
	    if (file != nil)
	    {
		offline_file	= file;
		UI::ReplaceWidget (`id (`rp_file), `HBox (
		    `Left (`Label (`id (`offline_file), offline_file)),
		    `Right (`PushButton (`id (`browse), _("&Change...")))
		));
	    }
	}
	if (ret == `offline_initialization || ret == `online_initialization)
	{
	    offline_initialization	= ret == `offline_initialization;
	    enable_disable_widgets ();
	}
	if (ret == `next)
	{
	    POSInstallation::offline_initialization	= offline_initialization;
	    POSInstallation::offline_file		= offline_file;
	    boolean missing	= false;
	    string write	= "";
	    // list widgets in the order of appearence
	    foreach (string key, [ "ALL_LDAPHOST", "BRANCH_LDAPBASE", "POS_ADMIN_PASSWORD"], {

		string value      = (string) UI::QueryWidget (`id (key), `Value);
		if (!offline_initialization && value == "")
		{
		    string label        = labels[key]:key;
		    // error popup
		    Popup::Error (sformat (_("The value of '%1' is empty."), label));
		    UI::SetFocus (`id (key));
		    missing     = true;
		    break;
		}
		else
		{
		    settings[key]	= value;
		    write	= sformat ("%1%2=%3\n", write, key, value);
		}
	    });
	    if (missing)
	    {
		continue;
	    }
	    POSInstallation::online_initialization_settings= settings;
	    if (!offline_initialization)
	    {
		y2milestone ("writing new /etc/SLEPOS/branchserver.conf");
		SCR::Write (.target.string, POSInstallation::bs_config_file, write);
	    }
	    break;
	}
    }
    return ret;
}
